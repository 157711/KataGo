#Example config for C++ (non-python) gtp bot

#Logs------------------------------------------------------------------------------------

#Where to output log?
logFile = gtp.log
#Logging options
logAllGTPCommunication = true
logSearchInfo = true

#Rules------------------------------------------------------------------------------------

#koRule = SIMPLE        #Simple ko rules (triple ko = no result)
koRule = POSITIONAL     #Positional superko
#koRule = SITUATIONAL   #Situational superko
#koRule = SPIGHT        #Spight superko - https://senseis.xmp.net/?SpightRules

scoringRule = AREA        #Area scoring
#scoringRule = TERRITORY  #Territory scoring (plus points in seki don't count)

multiStoneSuicideLegal = true  #Is multiple-stone suicide legal? (Single-stone suicide is always illegal).


#Search limits-----------------------------------------------------------------------------------

#If provided, limit maximum number of new playouts per search to this much. (With tree reuse, playouts do not count earlier search)
maxPlayouts = 1000
#If provided, limit maximum number of root visits per search to this much. (With tree reuse, visits do count earlier search)
#maxVisits = 1000
#If provided, cap search time at this many seconds (search will still try to follow GTP time controls)
#maxTime = 60

#Number of threads to use in search
numSearchThreads = 1
#Ponder on the opponent's turn?
ponderingEnabled = false


#GPU Settings-------------------------------------------------------------------------------

#Maximum number of positions to send to GPU at once. If your GPU has enough memory, you can increase this.
nnMaxBatchSize = 16
#Cache up to 2 ** this many neural net evaluations in case of transpositions in the tree.
nnCacheSizePowerOfTwo = 16
#How many threads should there be to feed positions to the neural net?
numNNServerThreadsPerModel = 1
#Randomize board orientation when running neural net evals?
nnRandomize = true
#If provided, force usage of a specific seed for nnRandomize instead of randomizing
#nnRandSeed = abcdefg

#TensorFlow GPU Settings------------------------------
#These only apply when using tensorflow as the backend for inference

#If provided, controls what gpu(s) to set tensorflow to use
#tensorflowGpuVisibleDeviceList = 0        #use gpu 0 only
#tensorflowGpuVisibleDeviceList = 0,1,2    #use gpus 0,1,2

#If provided, limit amount of gpu memory to use
#tensorflowPerProcessGPUMemoryFraction = 0.49


#CUDA GPU settings--------------------------------------
#These only apply when using CUDA as the backend for inference.
#(For GTP, we only ever have one model, when playing matches, we might have more than one, see match_example.cfg)

#Default behavior is just to always use gpu 0, you will want to uncomment and adjust one or more of these lines
#to take advantage of a multi-gpu machine
#cudaGpuToUse = 0 #use gpu 0 for all server threads (numNNServerThreadsPerModel) unless otherwise specified per-model or per-thread-per-model
#cudaGpuToUseModel0 = 3 #use gpu 3 for model 0 for all threads unless otherwise specified per-thread for this model
#cudaGpuToUseModel1 = 2 #use gpu 2 for model 1 for all threads unless otherwise specified per-thread for this model
#cudaGpuToUseModel0Thread0 = 3 #use gpu 3 for model 0, server thread 0
#cudaGpuToUseModel0Thread1 = 2 #use gpu 2 for model 0, server thread 1


#Search randomization------------------------------------------------------------------------------
#Note that multithreading can also introduce a significant amount of nondeterminism.

#If provided, force usage of a specific seed for various things in the search instead of randomizing
#searchRandSeed = hijklmn

#At the end of search, randomize between chosen moves with this temperature
chosenMoveTemperature = 0.15
#Subtract this many visits from each move prior to applying chosenMoveTemperature
#(unless all moves have too few visits) to downweight unlikely moves
chosenMoveSubtract = 1
#Temperature for the early game
chosenMoveTemperatureEarly = 0.8
#Decay temperature for the early game by 0.5 every this many moves
chosenMoveTemperatureHalflife = 16

#Use dirichlet noise for the root node policy?
rootNoiseEnabled = false
#Dirichlet noise alpha is set to this divided by number of legal moves. 10.83 produces an alpha of 0.03 on an empty 19x19 board.
rootDirichletNoiseTotalConcentration = 10.83
#Proportion of root policy that is noise
rootDirichletNoiseWeight = 0.25


#Internal params------------------------------------------------------------------------------

#Scales the utility of winning/losing
winLossUtilityFactor = 1.0
#Scales the utility for trying to maximize score
scoreUtilityFactor = 0.0
#The utility of getting a "no result" due to triple ko or other long cycle in non-superko rulesets
noResultUtilityForWhite = 0.0
#The utility of getting a jigo
drawUtilityForWhite = 0.0

#Exploration constant for mcts
cpuctExploration = 1.0
#FPU reduction constant for mcts
fpuReductionMax = 0.2
#Use parent average value for fpu base point instead of point value net estimate
fpuUseParentAverage = true
#Amount to apply a downweighting of children with very bad values relative to good ones
valueWeightExponent = 0.5

#How big to make the mutex pool for search synchronization
mutexPoolSize = 8192
#How many virtual losses to add when a thread descends through a node
numVirtualLossesPerThread = 3




